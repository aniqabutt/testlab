

Lab grader project

- Each group of students (typically two students) will be given a separate git repository.

- Students will use this github repo for their work. They can commit locally on their machines, and push to github as they see fit.

- When they are done with a lab assignment, and are ready to hand it in, they will tag the lab repo with a special tag, for example COMPLETED. (This is done using the git tag command). This procedure must be explained in the documentation that will be given to the students. 

- The instructor and teaching assistant for the course will receive an email from github when a lab is marked as COMPLETED.

- The instructor/TA can then do git pull to download the repo of the groups that have tagged their lab submission. This will allow manual analysis of the code and documentation that the different groups have submitted.

The above process is already being used in the course DAT520 Distributed system (more or less). It is accomplished using only git and github. So the above is not really part of the bachelor project, but it is a necessary component to get it to work.

-----

This is what we want the lab grader to do:

- Set up a continuous integration (CI) server that can work well with github. This may need to be done locally on a machine on the Unix network (or using some online service).

- The objective of the CI server is to run unit tests provided by us (the TA). These unit tests will be executed against the lab exercises submitted by the students.

- As a first trial, you can use the unit tests and code from lab 4 in OpSys to test that the CI server works. 
-> The following explains how I think it works to use a CI server. I have not used one before, so it may not be totally accurate.

- To run tests against student submitted code, I think the CI server can do a clone of unit tests for a particular lab assignment, which is also stored on a github repo.

- It also needs to do a clone of the student submitted code repo for a particular lab assignment.

- When the CI server has both the unit tests and submitted code these may need to be combined into the same package/folder structure, so that it can use the unit test framework to run the tests on the submitted code.

- I don't know how to do the above, but I'm sure it is possible, and the details will likely vary for different CI servers.

- For the Go programming language, this means using the 'go test group01/lab4' command to run the tests for the Go package of group01's lab 4 submission. The details here will vary of course, and it is not clear how the CI server will start a 'go test' process, but that is what you need to figure out. As a first step, running tests for lab 4 should be done on the local machine, to check that it works. Then try to run on the CI server.

- The result of running the tests, should be a test pass/fail report.

- The lab grader program should analyze this report and produce a grade.

- The lab grader program should commit and push this grade and report to the github repo of the student group, so that they will get an email with the result.

One important aspect to think about is how to structure the lab grader program to be able to work with many groups and many courses and so forth. This may require some modeling effort using e.g. UML or simple diagrams to illustrate the different concerns. This should be done before coding anything, but it needs a fundamental understanding of the problem. So you probably want to get the CI system up and running first.














